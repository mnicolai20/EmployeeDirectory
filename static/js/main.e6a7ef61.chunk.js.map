{"version":3,"sources":["utils/API.js","components/employeeBody/index.js","components/SearchForm/index.js","components/Header/index.js","components/employeeInfo/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","styles","card","margin","background","employeeBody","users","undefined","name","map","login","picture","phone","email","dob","key","uuid","className","style","src","medium","alt","first","last","date","dateArray","split","year","join","formatBirthday","SearchForm","props","htmlFor","value","search","onChange","handleInputChange","type","placeholder","Header","class","id","EmployeeDetail","state","filteredUsers","filterTerm","event","filter","target","newList","user","Object","values","toLowerCase","indexOf","setState","handleFormSubmit","preventDefault","API","then","res","data","status","Error","message","results","error","catch","err","this","employees","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e6a7ef61.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React from \"react\";\r\nimport './style.css';\r\n\r\nconst styles = {\r\n    card: {\r\n      margin: 20,\r\n      background: \"lightblue\"\r\n    }\r\n};\r\n\r\n\r\n\r\nfunction employeeBody({ users }) {\r\n\r\nfunction formatBirthday(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    \r\n    return [month, day, year].join(\"/\")\r\n}\r\n\r\n    return (\r\n        <>\r\n            {\r\n                users[0] !== undefined && users[0].name !== undefined ? (\r\n                    users.map(({ login, name, picture, phone, email, dob}) => {\r\n                        // Need to edit how date of birth is shown\r\n                    return (<p key={login.uuid} className=\"employees\" style={styles.card}><img src= {picture.medium} alt=\"photo\" /> {name.first} {name.last} {formatBirthday(dob.date)} {phone} {email}</p>)\r\n                    })\r\n                ) : (\r\n                    <></>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default employeeBody;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SearchForm(props) {\r\n  return(\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"employee\">Users: </label>\r\n        <input\r\n          value={props.search}\r\n          onChange={props.handleInputChange}\r\n          name=\"employee\"\r\n          type=\"search\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search...\"\r\n        />\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div class=\"heading\">\r\n            <h1 class=\"title\">Employee Directory</h1>\r\n            <h2 class=\"title\" id=\"descrip\">Search All Users</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport EmployeeBody from \"../employeeBody/index\";\r\nimport './style.css';\r\nimport SearchForm from \"../SearchForm/index\";\r\nimport Header from \"../Header/index\";\r\n\r\n\r\nclass EmployeeDetail extends Component {\r\n    state = {\r\n        users: [{}],\r\n        filteredUsers: [{}],\r\n        filterTerm: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        API.getUsers()\r\n        .then(({data}) => {\r\n            this.setState({users: data.results, filteredUsers: data.results})\r\n        })\r\n    };\r\n\r\n    //onchange (and pass into searchbar as a prompt)\r\n    handleInputChange = event => {\r\n        const filter = event.target.value;\r\n        const newList = this.state.users.filter(user => {\r\n            let value = Object.values(user).join(\"\").toLowerCase();\r\n            return value.indexOf(filter.toLowerCase()) !== -1;\r\n        })\r\n        this.setState({ search: filter, filteredUsers: newList });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.getUsers(this.state.search)\r\n        .then(res => {\r\n            if(res.data.status === \"error\") {\r\n                throw new Error(res.data.message);\r\n            }\r\n            this.setState({ results: res.data.message, error: \"\" });\r\n        })\r\n        .catch(err => this.setState({ error: err.message }));\r\n    };\r\n\r\n\r\n    render() { \r\n        return(\r\n        <div className=\"employees\">\r\n            <Header/>\r\n            <SearchForm\r\n                handleFormSubmit={this.handleFormSubmit}\r\n                handleInputChange={this.handleInputChange}\r\n                employees={this.state.filteredUsers}\r\n            />\r\n            <EmployeeBody users={this.state.filteredUsers} />\r\n        </div>\r\n    )\r\n    }\r\n};\r\n\r\nexport default EmployeeDetail;","import React from 'react';\nimport './App.css';\nimport Directory from \"./components/employeeInfo/index.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* header */}\n\n      <Directory/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}